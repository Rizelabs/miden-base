use.miden::kernels::tx::account
use.miden::kernels::tx::asset
use.miden::kernels::tx::constants
use.miden::kernels::tx::memory
use.miden::kernels::tx::note

#Â ERRORS
# =================================================================================================

# Output notes exceeded the maximum limit
const.ERR_TX_OUTPUT_NOTES_OVERFLOW=0x00020020

#! Returns the block hash of the last known block at the time of transaction execution.
#!
#! Inputs: []
#! Outputs: [H]
#!
#! H is the last known block hash.
export.memory::get_blk_hash->get_block_hash

#! Returns the block number of the last known block at the time of transaction execution.
#!
#! Inputs: []
#! Outputs: [num]
#!
#! num is the last known block number.
export.memory::get_blk_num->get_block_number

#! Returns the input notes hash. This is computed as a sequential hash of (nullifier, script_root)
#! tuples over all input notes.
#!
#! Inputs: []
#! Outputs: [COM]
#!
#! COM is the input notes hash.
export.memory::get_nullifier_com->get_input_notes_hash

#! Returns the output notes hash. This is computed as a sequential hash of (note_hash, note_metadata)
#! tuples over all output notes.
#!
#! Inputs: []
#! Outputs: [COM]
#!
#! COM is the output notes hash.
export.note::compute_output_notes_commitment->get_output_notes_hash

#! Increments the number of created notes by one. Returns the index of the next note to be created.
#!
#! Inputs: []
#! Outputs: [note_idx]
proc.increment_num_created_notes
    # get the current number of created notes
    exec.memory::get_num_created_notes
    # => [note_idx]

    # assert that there is space for a new note
    dup exec.constants::get_max_num_created_notes lt assert.err=ERR_TX_OUTPUT_NOTES_OVERFLOW
    # => [note_idx]

    # increment the number of created notes
    dup add.1 exec.memory::set_num_created_notes
    # => [note_idx]
end

#! Creates a new note and returns a pointer to the memory address at which the note is stored.
#!
#! Inputs: [note_type, ASSET, tag, RECIPIENT]
#! Outputs: [ptr, 0, 0, 0, 0, 0, 0, 0, 0]
#!
#! ASSET is the asset to be included in the note.
#! tag is the tag to be included in the note.
#! RECIPIENT is the recipient of the note.
#! ptr is the pointer to the memory address at which the note is stored.
export.create_note
    # Move the note type down the stack
    movdn.6
    # => [ASSET, tag, note_type, RECIPIENT]

    # validate the asset
    exec.asset::validate_asset
    # => [ASSET, tag, note_type, RECIPIENT]

    # get the index for the next note to be created and increment counter
    exec.increment_num_created_notes
    # => [note_idx, ASSET, tag, note_type, RECIPIENT]

    # get a pointer to the memory address at which the note will be stored
    exec.memory::get_created_note_ptr
    # => [note_ptr, ASSET, tag, note_type, RECIPIENT]

    # populate the metadata
    movup.5 exec.account::get_id movup.8 push.0
    # => [0, note_type, acct_id, tag, note_ptr, ASSET, RECIPIENT]

    # set the metadata for the new created note
    dup.4 exec.memory::set_created_note_metadata
    # => [note_ptr, ASSET, RECIPIENT]

    # set the number of assets for the note to 1
    push.1 dup.1 exec.memory::set_created_note_num_assets
    # => [note_ptr, ASSET, RECIPIENT]

    movdn.4 padw swapw movup.8
    # => [note_ptr, ASSET, 0, 0, 0, 0, RECIPIENT]

    # add the asset to the note
    dup movdn.5 exec.memory::get_created_note_asset_data_ptr mem_storew dropw
    # => [note_ptr, 0, 0, 0, 0, RECIPIENT]

    movdn.8 swapw padw swapw movup.12
    # => [note_ptr, RECIPIENT, 0, 0, 0, 0, 0, 0, 0, 0]

    # set the recipient
    dup movdn.5 exec.memory::set_created_note_recipient
    # => [note_ptr, 0, 0, 0, 0, 0, 0, 0, 0]
end
